# 12-16-2022 Leetcode 232. Implement Queue using Stacks
# https://leetcode.com/problems/implement-queue-using-stacks/


# Trivial solution, though I dont quite understand the Big O Amortized 
#analysis that claims that if the stacking is done on the pop, then
#the amortized time complexity is O(1). It seems like madness? We
#are processing n nodes someway. Either pushing or popping. How could
#it possibly be O(1)? Each operation is close to O(1) on average?
# I really am lost


class MyQueue:

    def __init__(self):
        self.stack1 = []
        self.stack2 = []

    def push(self, x: int) -> None:
        while self.stack1:
            self.stack2.append(self.stack1.pop())
        self.stack2.append(x)
        while self.stack2:
            self.stack1.append(self.stack2.pop())
        
    def pop(self) -> int:
        return self.stack1.pop()

    def peek(self) -> int:
        return self.stack1[-1]

    def empty(self) -> bool:
        return not self.stack1        


# Your MyQueue object will be instantiated and called as such:
# obj = MyQueue()
# obj.push(x)
# param_2 = obj.pop()
# param_3 = obj.peek()
# param_4 = obj.empty()