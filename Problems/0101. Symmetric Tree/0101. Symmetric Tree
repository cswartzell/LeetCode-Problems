# 03-12-2023 Leetcode 101. Symmetric Tree
# https://leetcode.com/problems/symmetric-tree/description/

#BFS and check curr_row is symmetric,
#lets deque and do it iteratively


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
from typing import Optional

class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        curr_row = collections.deque()
        next_row = collections.deque()
        next_row.append(root)

        while next_row:
            curr_row = next_row
            next_row = collections.deque()
            # could check if len(row) is odd, in a B Tree there cant be "center" nodes
            #... other than the root, so we'd need to get around that initial check
            
            for i in range(len(curr_row)):
                if curr_row[i] == None and curr_row[len(curr_row) - 1 - i] == None:
                    continue
                if i <= len(curr_row)//2 and (curr_row[i] and not curr_row[len(curr_row) - 1 - i]) or (not curr_row[i] and curr_row[len(curr_row) - 1 - i]) or (curr_row[i].val != curr_row[len(curr_row) - 1 - i].val):
                    return False
                next_row.appendleft(curr_row[i].left)
                next_row.appendleft(curr_row[i].right)

        return True
